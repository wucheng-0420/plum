<template>
  <!-- template里只能有一个根节点 -->
  <div class="fx-dt-col">
    <div class="swiper-container">
      <swiper class="swiper-wrapper" id="swiper" autoplay="true">
        <text class="swiper-slide color-1">A</text>
        <text class="swiper-slide color-2">B</text>
        <text class="swiper-slide color-3">C</text>
      </swiper>
    </div>
    <div class="fx-dt-col">
        <div class="pm-title"><text>最新动态</text><a>更多</a></div>
        <!-- 列表 -->
        <list class="list">
          <block for="{{listData}}">
            <!-- 列表元素，属性type值相同时，需要确保渲染后的视图布局也完全相同，用show代替if，确保布局视图不变 -->
            <list-item type="listItem" class="list-item" onclick="routeDetail('/DemoDetail')">
                <image src="" />
                <div class="item-title">
                  <a><span>官方</span>直播标题</a>
                  <text>直播简介：内容内容</text>
                  <text>xxxxxxxxxxxxx</text>
                </div>
            </list-item>
        </block>
      </list>
    </div>
    <div class="fx-dt-col">
      <div class="pm-title"><text>客户案例</text></div>
      <list class="list1">
          <!-- 列表元素，属性type值相同时，需要确保渲染后的视图布局也完全相同，用show代替if，确保布局视图不变 -->
          <list-item type="listItem" class="list-item" for="{{listData1}}">
              <image src="" />
              <text>名称名称</text>
          </list-item>
      </list>
    </div>
    <div  class="fx-dt-col">
        <div class="pm-title"><text>直播设备</text></div>
        <list class="list2">
            <!-- 列表元素，属性type值相同时，需要确保渲染后的视图布局也完全相同，用show代替if，确保布局视图不变 -->
            <list-item type="listItem" class="list-item" for="{{listData2}}">
                <image src="" />
                <div class="item-title1">
                    <text>名称名称</text>
                    <text>$100</text>
                </div>
            </list-item>
        </list>
    </div>
  </div>
</template>

<style>
    .fx-dt-col {
        flex-direction: column;
    }
    
    .swiper-container {
        height: 350px;
    }
    
    .swiper-wrapper {
        flex-direction: column;
        /*indicator-color: #800080;
    indicator-selected-color: #000000;*/
    }
    
    .color-1 {
        background-color: #7FFFD4;
        text-align: center;
    }
    
    .color-2 {
        background-color: #FFEBCD;
        text-align: center;
    }
    
    .color-3 {
        background-color: #5F9EA0;
        text-align: center;
    }
    
    .pm-title {
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 20px;
        padding-right: 20px;
    }
    
    .pm-title>text {
        flex: 1;
        color: #333333;
        font-size: 35px;
    }
    
    .list {
        height: 450px;
        padding-left: 20px;
        padding-right: 20px;
    }
    
    .list>.list-item {
        height: 150px;
        padding-bottom: 20px;
    }
    
    .list>.list-item>image {
        flex: 1;
        background-color: #DEB887;
    }
    
    .item-title {
        flex: 2;
        flex-direction: column;
        margin-left: 20px;
    }
    
    .list1 {
        height: 560px;
        padding-left: 20px;
        padding-right: 20px;
        flex-direction: column;
        columns: 3;
        justify-content: space-between;
    }
    
    .list1>.list-item {
        width: 220px;
        flex-direction: column;
        padding-bottom: 15px;
    }
    
    .list1>.list-item>image {
        background-color: #DEB887;
        height: 130px;
    }
    
    .list1>.list-item>text {
        align-self: center;
    }
    
    .list2 {
        height: 660px;
        padding-left: 20px;
        padding-right: 20px;
        flex-direction: column;
        columns: 2;
        justify-content: space-between;
    }
    
    .list2>.list-item {
        width: 338px;
        flex-direction: column;
        padding-bottom: 15px;
    }
    
    .list2>.list-item>image {
        background-color: #DEB887;
        height: 230px;
    }
    
    .list2 .item-title1 {
        flex-direction: column;
        padding-left: 10px;
        border-color: #DEB887;
        border-width: 1px;
    }
</style>

<script>
    import router from '@system.router'

    export default {
        // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
        private: {
            title: '示例页面'
        },
        data: {
            listData: ['A', 'B', 'C'],
            listData1: ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'],
            listData2: ['A', 'B', 'C', 'C'],
        },
        routeDetail(uri) {
            // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
            router.push({
                uri
            })
        }
    }
</script>